#!/usr/bin/env ruby

require "optparse"
require "json"
require "shellwords"

options = {
  started_by: "ecs_run_task",
  launch_type: "FARGATE",
  console: false,
  container: "worker"
}

OptionParser.new do |opts|
  opts.banner = "Usage: ecs_run_task -h"

  opts.on("--command COMMAND", "Command to run") do |value|
    options[:command] = value
  end

  opts.on("--service SERVICE", "Service name") do |value|
    options[:service] = value
  end

  opts.on("--cluster cluster", "Cluster") do |value|
    options[:cluster] = value
  end

  opts.on("--container container", "Container name") do |value|
    options[:container] = value
  end

  opts.on("--started-by started_by", "Started by") do |value|
    options[:started_by] = value
  end

  opts.on("--launch-type launch_type", "Launch type") do |value|
    options[:launch_type] = value
  end

  opts.on("--task-definition task_definition", "Task definition") do |value|
    options[:task_definition] = value
  end

  opts.on("--console", TrueClass, "Run interactive console") do |value|
    options[:console] = value
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

describe_services_options = {
  "services": [
    options.fetch(:service)
  ],
  "cluster": options.fetch(:cluster)
}
network_configuration = `aws ecs describe-services --cli-input-json '#{describe_services_options.to_json}' --query 'services[0].networkConfiguration'`
run_task_options = {
  "startedBy": options.fetch(:started_by),
  "cluster": options.fetch(:cluster),
  "launchType": options.fetch(:launch_type),
  "taskDefinition": options.fetch(:task_definition, options.fetch(:service)),
  "networkConfiguration": JSON.parse(network_configuration),
  "enableExecuteCommand": options.fetch(:console),
  "overrides": {
    "containerOverrides": [
      {
        "name": options.fetch(:container),
        "command": Shellwords.split(options.fetch(:command))
      }
    ]
  }
}

task_arn = `aws ecs run-task --cli-input-json '#{run_task_options.to_json}' --query 'tasks[0].taskArn' --output text`.chomp
task_id = task_arn.split("/").last

puts "Task created: #{task_id}"
puts "Waiting for task to start..."
`aws ecs wait tasks-running --cluster #{options.fetch(:cluster)} --tasks #{task_id}`
puts "Task started: #{task_id}"

if options.fetch(:console)
  puts "Starting console..."
  `aws ecs execute-command --cluster #{options.fetch(:cluster)} --task #{task_id} --container worker --command "/bin/sh" --interactive`

  puts "Stop task here..."

  puts "Run console: "
  puts "aws ecs execute-command --cluster #{options.fetch(:cluster)} --task #{task_id} --container #{options.fetch(:container)} --command \"/bin/sh\" --interactive"
  puts "Stop task: "
  puts "aws ecs stop-task --cluster #{options.fetch(:cluster)} --task #{task_id}"
  puts "Describe task: "
  puts "aws ecs describe-tasks --cluster #{options.fetch(:cluster)} --tasks #{task_id}"
end
