on: push
name: Build Twilreapi

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    env:
      PGHOST: localhost
      PGUSER: postgres
      RAILS_ENV: test
      CI: true

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true

      - name: Setup Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: '14.x'

      - name: Get yarn cache directory
        id: get-yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn dependencies
        uses: actions/cache@v2.1.4
        with:
          path: ${{ steps.get-yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-twilreapi-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-twilreapi-

      - name: Install yarn dependencies
        run: yarn install

      - name: Setup DB
        run: bundle exec rails db:create db:schema:load

      - name: Run Specs
        run: |
          bundle exec rspec --format RspecApiDocumentation::ApiFormatter

      - name: Upload Test Coverage
        working-directory: ${{ env.working-directory }}
        continue-on-error: true
        env:
          CODACY_PROJECT_TOKEN: "${{ secrets.CODACY_PROJECT_TOKEN }}"
        run: |
          curl -Ls -o codacy-coverage-reporter "$(curl -Ls https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | contains("codacy-coverage-reporter-linux"))) | .[0].browser_download_url')"
          chmod +x codacy-coverage-reporter
          ./codacy-coverage-reporter report -l Ruby -r coverage/lcov/*

      - name: Prepare Documentation Source
        if: github.ref == 'refs/heads/master'
        run: |
          cp -R doc/slate/source/* doc/api
          cp app/assets/images/logo.png doc/api/logo.png

      - name: Upload Documentation Source
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2.2.2
        with:
          name: documentation_source
          path: doc/api

      - name: Compile Assets
        if: github.ref == 'refs/heads/master'
        env:
          RAILS_ENV: development
        run: |
          bundle exec rails assets:precompile

      - name: Upload Assets
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2.2.2
        with:
          name: assets
          path: public

  build_documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout Slate
        uses: actions/checkout@v2
        with:
          ref: main
          repository: slatedocs/slate

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true

      - name: Download Documentation Source
        uses: actions/download-artifact@v2
        with:
          name: documentation_source
          path: source

      - name: Prepare Slate
        run: |
          echo "@import 'overrides';" >> source/stylesheets/_variables.scss

      - name: Build API Documentation
        run: bundle exec middleman build

      - name: Copy OpenAPI specification
        run: cp source/open_api.json build

      - name: Upload API Documentation
        uses: actions/upload-artifact@v2
        with:
          name: api_documentation
          path: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Deploy API Documentation
        run: aws s3 sync --acl public-read --delete build s3://www.somleng.org/docs/twilreapi

      - name: Invalidate Cache
        run: aws cloudfront create-invalidation --distribution-id E3962XCJFZ0KB1 --paths /docs/twilreapi/\*

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    env:
      IMAGE_TAG: ${{ github.sha }}
      APP_IDENTIFIER: twilreapi
      ECR_PUBLIC_REGISTRY: public.ecr.aws
      APP_ECR_REPOSITORY_URI: public.ecr.aws/somleng/twilreapi
      NGINX_ECR_REPOSITORY_URI: public.ecr.aws/somleng/twilreapi-nginx

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'

      - name: Download Assets
        uses: actions/download-artifact@v2
        with:
          name: assets
          path: public

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Login to AWS Public ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ECR_PUBLIC_REGISTRY }}
          username: ${{ env.AWS_ACCESS_KEY_ID }}
          password: ${{ env.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.APP_IDENTIFIER }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.APP_IDENTIFIER }}-

      - name: Build and push to AWS ECR `${{ env.APP_IDENTIFIER }}`
        uses: docker/build-push-action@v2.4.0
        with:
          context: .
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache/.buildx-cache-${{ env.APP_IDENTIFIER }}
          cache-to: type=local,dest=/tmp/.buildx-cache-${{ env.APP_IDENTIFIER }}
          tags: |
            ${{ env.APP_ECR_REPOSITORY_URI }}:latest
            ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG  }}

      - name: Prepare nginx config
        run: |
          cp -R public/* docker/nginx/public

      - name: Build and push to AWS ECR `nginx`
        uses: docker/build-push-action@v2.4.0
        with:
          context: "docker/nginx"
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache/.buildx-cache-${{ env.APP_IDENTIFIER }}-nginx
          cache-to: type=local,dest=/tmp/.buildx-cache-${{ env.APP_IDENTIFIER }}-nginx
          tags: |
            ${{ env.NGINX_ECR_REPOSITORY_URI }}:latest
            ${{ env.NGINX_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG  }}

      - name: Move docker layer caches
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        run: |
          rm -rf /tmp/.buildx-cache
          mkdir /tmp/.buildx-cache
          mv /tmp/.buildx-cache-${{ env.APP_IDENTIFIER }} /tmp/.buildx-cache
          mv /tmp/.buildx-cache-${{ env.APP_IDENTIFIER }}-nginx /tmp/.buildx-cache

      - name: Prepare nginx task definition
        id: render-nginx-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/production/appserver_task_definition.json
          container-name: nginx
          image: ${{ env.NGINX_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Prepare app server task definition
        id: render-appserver-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-nginx-task-def.outputs.task-definition }}
          container-name: app
          image: ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Prepare worker task definition
        id: render-worker-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/production/worker_task_definition.json
          container-name: worker
          image: ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Run DB Migrate
        run: |
          aws ecs register-task-definition --cli-input-json file://${{ steps.render-worker-task-def.outputs.task-definition }}
          ./bin/ecs_run_task --cluster somleng --started-by db_migrate_ci --service ${{ env.APP_IDENTIFIER }}-worker --command "bundle exec rails db:migrate"

      - name: Deploy App Server
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-appserver-task-def.outputs.task-definition }}
          service: ${{ env.APP_IDENTIFIER }}-appserver
          cluster: somleng
          wait-for-service-stability: true
          codedeploy-appspec: deploy/appspec.yaml
          codedeploy-application: ${{ env.APP_IDENTIFIER }}
          codedeploy-deployment-group: ${{ env.APP_IDENTIFIER }}

      - name: Deploy Worker
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-task-def.outputs.task-definition }}
          service: ${{ env.APP_IDENTIFIER }}-worker
          cluster: somleng
          wait-for-service-stability: true
