on: push
name: Build Somleng

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-deployment-matrix.outputs.matrix }}
      matrixLength: ${{ steps.set-deployment-matrix.outputs.matrixLength }}

    env:
      PGHOST: localhost
      PGUSER: postgres
      RAILS_ENV: test
      CI: true

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Adapted from
      # https://stackoverflow.com/a/65434401
      - name: Set Deployment Matrix
        id: set-deployment-matrix
        run: |
          branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')
          matrixSource=$(cat << EOF
          [
            {
              "identifier": "somleng-staging",
              "branch": "develop",
              "environment": "staging",
              "image_tag": "staging",
              "ecs_cluster": "somleng-staging"
            },
            {
              "identifier": "twilreapi",
              "branch": "master",
              "environment": "production",
              "image_tag": "latest",
              "ecs_cluster": "somleng"
            }
          ]
          EOF
          )
          matrix=$(echo $matrixSource | jq --arg branchName "$branchName" 'map(. | select((.branch==$branchName)) )')
          echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
          echo ::set-output name=matrixLength::$(echo $matrix | jq length)

      - name: Checkout
        uses: actions/checkout@v3

      - uses: FedericoCarboni/setup-ffmpeg@v1

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'yarn'

      - name: Setup DB
        run: bundle exec rails db:create db:schema:load

      - name: Run Specs
        run: |
          bundle exec rails spec:prepare
          bundle exec rspec --format RspecApiDocumentation::ApiFormatter

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

      - name: Prepare Documentation Source
        if: steps.set-deployment-matrix.outputs.matrixLength > 0
        run: |
          cp app/assets/images/logo_documentation.png doc/logo.png

      - name: Upload Documentation Source
        if: steps.set-deployment-matrix.outputs.matrixLength > 0
        uses: actions/upload-artifact@v3
        with:
          name: documentation_source
          path: doc/

  build_documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.matrixLength > 0
    steps:
      - name: Checkout Slate
        uses: actions/checkout@v3
        with:
          ref: main
          repository: slatedocs/slate

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Download Documentation Source
        uses: actions/download-artifact@v3
        with:
          name: documentation_source
          path: api_docs

      - name: Prepare Slate
        run: |
          cp -R api_docs/slate/source/stylesheets/* source/stylesheets
          cp api_docs/logo.png source/logo.png
          echo "@import 'overrides';" >> source/stylesheets/_variables.scss

      - name: Build API Documentation
        run: |
          cp -R api_docs/carrier_api/* source
          bundle exec middleman build --build-dir=build/carrier_api

          cp -R api_docs/twilio_api/* source
          bundle exec middleman build --build-dir=build/twilio_api

      - name: Upload API Documentation
        uses: actions/upload-artifact@v3
        with:
          name: api_documentation
          path: build

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Deploy API Documentation
        if: github.ref == 'refs/heads/master'
        run: aws s3 sync --acl public-read build s3://www.somleng.org/docs/

      - name: Invalidate Cache
        if: github.ref == 'refs/heads/master'
        run: aws cloudfront create-invalidation --distribution-id E3962XCJFZ0KB1 --paths /docs/\*

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - build
      - build_documentation

    if: needs.build.outputs.matrixLength > 0
    env:
      IMAGE_TAG: ${{ github.sha }}
      ECR_PUBLIC_REGISTRY: public.ecr.aws
      APP_ECR_REPOSITORY_URI: public.ecr.aws/somleng/somleng
      NGINX_ECR_REPOSITORY_URI: public.ecr.aws/somleng/somleng-nginx

    strategy:
      matrix: ${{fromJson(needs.build.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Documentation
        uses: actions/download-artifact@v3
        with:
          name: api_documentation
          path: doc/build

      - name: Copy API Documentation public
        run: |
          cp -R doc/build/twilio_api/* public/docs/
          mv public/docs/index.html public/docs/twilio_api/

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Login to AWS Public ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_PUBLIC_REGISTRY }}
        env:
          AWS_REGION: us-east-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push to AWS ECR `${{ matrix.identifier }}`
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          cache-from: type=gha,scope=${{ matrix.identifier }}
          cache-to: type=gha,mode=max,scope=${{ matrix.identifier }}
          tags: |
            ${{ env.APP_ECR_REPOSITORY_URI }}:${{ matrix.image_tag }}
            ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG  }}

      - name: Build and push to AWS ECR `nginx`
        uses: docker/build-push-action@v3
        with:
          context: "docker/nginx"
          push: true
          cache-from: type=gha,scope=${{ matrix.identifier }}-nginx
          cache-to: type=gha,mode=max,scope=${{ matrix.identifier }}-nginx
          tags: |
            ${{ env.NGINX_ECR_REPOSITORY_URI }}:${{ matrix.image_tag }}
            ${{ env.NGINX_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG  }}

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition --task-definition "${{ matrix.identifier }}-appserver" --query 'taskDefinition' > task-definition.json
          cat task-definition.json

      - name: Prepare nginx task definition
        id: render-nginx-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: nginx
          image: ${{ env.NGINX_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Prepare app server task definition
        id: render-appserver-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-nginx-task-def.outputs.task-definition }}
          container-name: app
          image: ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition --task-definition "${{ matrix.identifier }}-worker" --query 'taskDefinition' > task-definition.json
          cat task-definition.json

      - name: Prepare worker task definition
        id: render-worker-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: worker
          image: ${{ env.APP_ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Register Migration Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-task-def.outputs.task-definition }}

      - name: Run DB Migrate
        run: |
          ./bin/ecs_run_task --cluster ${{ matrix.ecs_cluster }} --started-by db_migrate_ci --service ${{ matrix.identifier }}-worker --command "bundle exec rails db:migrate"

      - name: Deploy App Server
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-appserver-task-def.outputs.task-definition }}
          service: ${{ matrix.identifier}}-appserver
          cluster: ${{ matrix.ecs_cluster}}
          wait-for-service-stability: true

      - name: Deploy Worker
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-task-def.outputs.task-definition }}
          service: ${{ matrix.identifier}}-worker
          cluster: ${{ matrix.ecs_cluster}}
          wait-for-service-stability: true
